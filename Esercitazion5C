ESERCITAZIONE 5
//--------------------------------------------------------------------------------------------
ESERCIZIO 1

#include <stdio.h>
#include <string.h>

#define DIM 200
void comprimi(char str[], int n) {
    int i=0;
    int bin[200],l,k=0;
    while(n>0){
        bin[i] = n % 2;
        n = n/2;
        if(bin[i]==1){ //calcola quanti 1 ci sono, per poi determinare la fine dell'array
            k++;
        }
        i++;
    }

    int d=0;
    for(l=0;l<i;l++){ //compara bin[c] con str[]
        if(bin[l]==1){
            str[d] = str[l];
            d++;

        }
    }
    str[k]='\0'; //fine array

}

int main() {
    char str[DIM];
    int num;
    scanf("%s", str);
    scanf("%d", &num);
    comprimi(str, num); /*usare il side effect!*/
    printf("%s\n",str);
    return 0;
}

//-----------------------------------------------------------------------------------------------------------
ESERCIZIO 2

#include <math.h>
#include <stdio.h>
#include <string.h>
void trasforma_fen(char s1[], char s2[]){
    int i,k,j=0;
    do{
        if(s1[k]>='0' && s1[k]<='9') {
            for (i = 0; i < s1[k]-'0'; i++) {
                s2[j] = '_';
                j++;
            }
        } else{
            if(s1[k] == '/'){
                s2[j]='\n';
                j++;
            } else{
                s2[j]=s1[k];
                j++;
            }
        }
        k++;

    }while(s1[k]!='\0');
}

int main() {
    char input[100];
    char output[100];
    
    scanf("%s", input);
    
    trasforma_fen(input, output);
    
    printf("%s", output);
    return 0;
}

//-------------------------------------------------------------------------------------------
ESERCIZIO 3

int maxHeight(int wallPositions_count, int* wallPositions, int wallHeights_count, int* wallHeights) 
{
    int diffaltezza,max=0,distanza,altezza,d=1,i,contatore,c,e;
    int minore,maggiore;
    int sum=0;
    for(i=0;i<wallPositions_count-1;i++){
        if(wallPositions[i+1]-1 == wallPositions[i]){
            sum++;
        }
        
    }
    if(sum == wallPositions_count-1){
        return 0;
    }
    for(i=0;i<wallPositions_count-1;i++)
    {
        if(wallPositions[i+1]-1 != wallPositions[i])
        { //se il succ diverso dal precedente
           distanza = abs(wallPositions[i]-wallPositions[i+1])-1; //distanza positivo
           diffaltezza = abs(wallHeights[i]-wallHeights[i+1]); //diff positivo
           if(wallHeights[i]<wallHeights[i+1]) //definisco quale maggiore quale minore
           {
                minore = wallHeights[i];
                maggiore = wallHeights[i+1];
           }else{
               minore = wallHeights[i+1];
               maggiore = wallHeights[i];
           }
           if(diffaltezza>distanza)
           {
               altezza = minore + distanza;
           }else
           {
               if(diffaltezza==distanza) //se diffalt = distanza
               {
                   altezza = minore + 1;
               }else
               {
                   if(distanza>diffaltezza)
                   {
                       contatore = distanza - diffaltezza;
                       if(contatore == 1){
                           altezza = maggiore + 1;
                       }else{
                           if(contatore % 2 != 0 && contatore>1 ){
                               altezza = maggiore + (contatore/2)+1;
                           }else{
                               altezza = maggiore + (contatore/2); //6 + 2/2 = 7
                           }
                       }
                   }
               }
           }
           
        }
        if(max<altezza){
            max = altezza;
            }
    }
    return max;
}