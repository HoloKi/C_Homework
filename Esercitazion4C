//ESERCITAZIONE 4
-------------------------------------------------------------------------------------------------
ESERCIZIO 1

#include <stdio.h>

int leggi_array(double vet[]){
    int i,k,j;
    do{
        scanf("%d",&k);
    }while(k<0 || k>50);
    for(i=0;i<k;i++)
        scanf("%lf",&vet[i]);
    return k;
}

void ordina_array(double vet[], int dim){
    int i, soglia;
    for(soglia=0;soglia<dim;soglia++)
        for(i=dim-1;i>soglia;i--)
            if(vet[i]>vet[i-1]){
                double sup;
                sup=vet[i];
                vet[i]=vet[i-1];
                vet[i-1]=sup;
            }
}


void stampa_array(double vet[], int dim) {
    int i;
    for (i=0; i<dim; i++)
        printf("%.2f\n", vet[i]);
}

int main() {
    double myarr[50];
    
    int d;
    
    d=leggi_array(myarr);
    ordina_array(myarr, d);
    stampa_array(myarr, d);
    
    return 0;
}

//-------------------------------------------------------------------------------------------
ESERCIZIO 2	
#include <stdio.h>

void leggi_array(int vet[], int dim){
    int i;
    for(i=0;i<10;i++)
        scanf("%d",&vet[i]);
}

int somma_presente(int vet[],int dim,int target){
    int i,j,s,k; //s somma , k contatore
    k=0;
    for(i=0;i<dim;i++){
        for(j=i+1;j<dim; j++) {
            s = vet[i] + vet[j];
            if (s == target)
                k = 1;
        }
    }
    return k;
}

int main() {
    int vet[10];
    int target;
    leggi_array(vet, 10);
    scanf("%d", &target);

    if (somma_presente(vet, 10, target))
        printf("SI");
    else
        printf("NO");

    return 0;
}
//---------------------------------------------------------------------------------------------
ESERCIZIO 3

#include <stdio.h>

void leggi_soluzione(int tab[9][9]) {
    int r, c;
    for (r=0; r<9; r++)
        for (c=0; c<9; c++)
            scanf("%d", &tab[r][c]);    
}

//controlla ripetizioni in riga e se tra 1 e 9
int controlla_ripr(int sud[9][9]){ //controlla ripetizioni e righe
    int i,j,k,check=1;
    for(k=0;k<9;k++) //riga
        for (i=0; i<9; i++) //prende primo valore e poi successivi
        {
            for(j=i+1; j<9; j++)
            {
                if (sud[k][i]==sud[k][j])
                    check=0;
                if(sud[k][i]<0 || sud[k][i]>9 )
                    check = 0;
            }
        }
    return check;
}

//controlla ripetizioni in colonna
int controlla_ripc(int sud[9][9]){ //controlla ripetizioni  e colonne
    
    int i,j,k,check=1;
    for(k=0;k<9;k++)
    { //colonna
        for(i=0;i<9;i++)
        {
            for(j=i+1;j<9;j++)
            {
                if(sud[i][k]==sud[j][k])
                    check=0;
            }
        }
    }
    return check;
}
 //controlla matrice 3x3
int controlla_quadrato(int sud[9][9]) {
    int i, k, j,r, check = 1, s = 0;
    for(r=0;r<=6;r=r+3) //si muove sotto di 3 blocchi
    {
        for(j=0;j<=6;j=j+3)//si muove di lato di 3 blocchi
            {
            s = 0;
            for (i = 0+r; i < 3+r; i++) //colonna
            {
                for (k = 0; k < 3; k++) //riga
                {
                    s = s + sud[i][k];
                }
            }
            if (s != 45)
                check = 0;
        }
    }
    return check;
}


int controlla_sudoku(int sud[9][9]){
    int check;
    if(controlla_ripc(sud) == 1 && controlla_ripr(sud)==1 && controlla_quadrato(sud)==1)
        check=1;
    else
        check=0;
    return check;
}


int main() {
    int sud[9][9];
    
    leggi_soluzione(sud);
    
    if (controlla_sudoku(sud))
        printf("SI");
    else
        printf("NO");
    
    return 0;
}

